# -*- coding: utf-8 -*-
"""Scrapper.py --static

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-C1NSLeOw_PVoVaqCVUF4H5TohOOYVeK
"""

import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from bs4 import BeautifulSoup
import requests as r
import json
import sys

# scrapping the data and finding the table
soup = BeautifulSoup(open(sys.argv[1]),features="lxml")
tables = soup.findChildren('table')

# Now getting all the data that contains the GDP data 
main_table = tables[1]
rows = main_table.findAll('tr')
list1 = []
for tr in rows:
    cols = tr.findAll('td')
    for td in cols:
        list1.append(td.text.replace('\n', ''))


# Seperating the data into two lists
years_dictionary =[]
gdp_capita = []
for x in list1:
  if len(x) == 4:
    years_dictionary.append(x)
  elif "$" in x:
    gdp_capita.append(x)


# Making a dictionary out of that list 
dict_from_list = dict(zip(years_dictionary, gdp_capita))

# Starting my dataframe 

df = pd.DataFrame(dict_from_list.items(), columns=['Date', 'GDP_Per_Capita'])
df.Date = pd.to_datetime(df.Date)
df.Date = df['Date'].dt.to_period('y')

# Setting the dates
df = df[(df.Date<="2017") & (df.Date >= "1967")]
df =df.reset_index(drop = True)

# printing the beginning df

gdp = df

# Now getting the unemployment rate from the API
f= open(sys.argv[2])
j = json.load(f)

unemployment_rate = j['dataset']['data']


# Now getting only the first month of the year to put in data frame
unemployment_list = []
for i,x in enumerate(unemployment_rate):
  if i % 4 == 0:
    unemployment_list.append(x)


# Manipulating the dataframe

unemployment_df = pd.DataFrame(unemployment_list, columns = ['Date', 'unemployment_rate'])
unemployment_df.Date = pd.to_datetime(unemployment_df.Date)
unemployment_df.Date = unemployment_df['Date'].dt.to_period('y')
unemployment_df = unemployment_df[(unemployment_df.Date >= "1967") & (unemployment_df.Date <= "2017")]
unemployment_df = unemployment_df.reset_index(drop = True)
f.close()

# Merging the data from unemployment and the master data frame
df= df.merge(unemployment_df, on = "Date")

# Real Gross Domestic Product 
f= open(sys.argv[3])
j = json.load(f)
real_gdp = j['dataset']['data']


# Now getting only the first month of the year to put in data frame
real_gdp_list = []
for i,x in enumerate(real_gdp):
  if i % 4 == 0:
    real_gdp_list.append(x)


# Manipulating the dataframe
real_gdp_df = pd.DataFrame(real_gdp_list, columns = ['Date', 'real_gdp'])
real_gdp_df.Date = pd.to_datetime(real_gdp_df.Date)
real_gdp_df.Date = real_gdp_df['Date'].dt.to_period('y')
real_gdp_df = real_gdp_df[(real_gdp_df.Date >= "1967") & (real_gdp_df.Date <= "2017")]
real_gdp_df = real_gdp_df.reset_index(drop = True)

f.close()

# merging the master data frame and real gdp dataframes together
df= df.merge(real_gdp_df, on = "Date")

# PCE
# Measures relative price changes
f= open(sys.argv[4])
j = json.load(f)
# Gathering the dataset and setting it to the first month 
personal_consumption = j['dataset']['data']
personal_consumption_df = pd.DataFrame(personal_consumption, columns = ['Date', "Personal Consumption expenditures(PCE)","Goods Price Index (PCE)","Durable Goods Price Index (PCE)","Non Durable Goods Price Index (PCE)","Services Price Index (PCE)","PCE Exclusing food and energy","Food Price Index (PCE)","Energy/Services Price Index (PCE)","Market-based Price Index (PCE)","Market_based Price index excluding food and energy (PCE)"])
personal_consumption_df.Date = pd.to_datetime(personal_consumption_df.Date)
personal_consumption_df = personal_consumption_df[personal_consumption_df['Date'].dt.month == 1]
personal_consumption_df = personal_consumption_df.reset_index(drop = True)

#Changing it to year and making sure the right date time rangess
personal_consumption_df.Date = personal_consumption_df['Date'].dt.to_period('y')
personal_consumption_df = personal_consumption_df[(personal_consumption_df.Date >= "1967") & (personal_consumption_df.Date <= "2017")]


# Merging the master dataframe with the personal consumption dataframe
df= df.merge(personal_consumption_df, on = "Date")
f.close()
# Real Imports and Exports Quanitity indexes
f= open(sys.argv[5])
j = json.load(f)
# Data manipulation to get the imports and exports columns
imports_exports = j['dataset']['data']
imports_exports_df = pd.DataFrame(imports_exports)
Dates = imports_exports_df.iloc[:,0]
imports_exports_df = imports_exports_df.iloc[:,-7:]
imports_exports_df = imports_exports_df.rename(columns={49: 'Exports of Durable Goods (QI)', 50: 'Exports of Nondurable Goods (QI)',51:"Exports of Argicultural Goods(QI)",52:"Exports of Nonagricultural Goods (QI)",53:"Import of Durable Goods (QI)",54:"Imports of Nondurable Goods (QI)",55:"Imports of Nonpetroleum Goods (QI)"})


# Appending All the dates back into the dataframe 
imports_exports_df["Date"] = Dates
imports_exports_df.Date = pd.to_datetime(imports_exports_df.Date)

# Get the month as in the year that is in every year 
imports_exports_df = imports_exports_df[imports_exports_df['Date'].dt.month == 12]
imports_exports_df = imports_exports_df.reset_index(drop = True)

# Making sure the year is in the right range and format
imports_exports_df.Date = imports_exports_df['Date'].dt.to_period('y')
imports_exports_df = imports_exports_df[(imports_exports_df.Date >= "1967") & (imports_exports_df.Date <= "2017")]
# Merging the imports and exports data with the master data 
df= df.merge(imports_exports_df, on = "Date")
f.close()
"""**Stock Data**"""

# List of important indexes for the US economy 
# In order: S&P 500, Dow Jones Industrial Average, Nasdaq Composite,S&P MidCap 400 Index, S&P Global 100 Index, 

# Getting the closing prices of the index
stocks_data_df = pd.read_csv(sys.argv[6])
stocks_data_df.Date = pd.to_datetime(stocks_data_df.Date)
# Putting the dates into datetime

# Dates are inconsitent so grabbing the first data point of each year 
stocks_data_df = stocks_data_df.groupby(pd.Grouper(key='Date', freq="Y")).first()
stocks_data_df["Date"] = pd.to_datetime(stocks_data_df.index)
stocks_data_df = stocks_data_df.reset_index(drop = True)

# Making sure the dates are in the right range and format
stocks_data_df.Date = stocks_data_df.Date.dt.to_period('y')
stocks_data_df = stocks_data_df[(stocks_data_df.Date >= "1967") & (stocks_data_df.Date <= "2017")]
stocks_data_df = stocks_data_df.reset_index(drop = True)

#Renaming columns
stocks_data_df = stocks_data_df.rename(columns={"^GSPC": 'S&P 500', "^DJI;": "Dow Jones Industrial Average","^IXIC":"Nasdaq Composite"})


# Merging the stock data with the master dataframe
df = df.merge(stocks_data_df,on= "Date")

# printing the master dataframe head
df.to_csv("full_dataset.csv")

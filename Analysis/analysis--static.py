# -*- coding: utf-8 -*-
"""analysis--static

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10lMHnS1Zz2af8SIVhRAu7E9ovZN0Nk9D
"""

import matplotlib as plt
import pandas as pd
import matplotlib.pyplot as plt 
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
import numpy as np
from sklearn.model_selection import cross_val_score
import sys

df = pd.read_csv(sys.argv[1])
df = df.iloc[: , 1:]

# Transforming into a integer 
df['GDP_Per_Capita'] = df['GDP_Per_Capita'].str.replace(',', '')
df['GDP_Per_Capita'] = df['GDP_Per_Capita'].str.replace('$', '')
df['GDP_Per_Capita'] = df['GDP_Per_Capita'].astype(int)

print(df.head())

# Plotting 
df.plot(x = "Date",y ="GDP_Per_Capita", legend = False)
plt.ylabel("GDP Per Capita in US Dollars")
plt.title("GDP Per Capita over Time")
plt.xlabel("")
plt.show()

# Preprocessing by putting GDP per capita first
model_dataset = df.drop(columns = "Date")

model_dataset.fillna(0,inplace=True)

# Splitting the data into training and testing
X = model_dataset.iloc[:, 1:]
y = model_dataset.iloc[:, 0]

# partition data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
                                                    X,
                                                    y,
                                                    test_size=0.3,
                                                    random_state = 15
                                                    )

from sklearn.ensemble import RandomForestRegressor
model_rf = RandomForestRegressor(n_estimators=7, max_features= 5, random_state=15)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)

# Running results


print('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_test, y_pred))
print('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
mape = np.mean(np.abs((y_test - y_pred) / np.abs(y_test)))
print('Mean Absolute Percentage Error (MAPE):', round(mape * 100, 2))
print('Accuracy:', round(100*(1 - mape), 2))

# Finding feature importance 
feature_importances = model_rf.feature_importances_
features = X_train.columns
df1 = pd.DataFrame({'features': features, 'importance': feature_importances}).nlargest

# Make a bar chart for feature importance

plt.bar(features, feature_importances, orientation = 'vertical')
plt.xticks(rotation= 90)
plt.ylabel("Feature Importance")
plt.title("Feature Importance")
plt.style.use("ggplot")
plt.show()

# Plotting the y-test and y-predicted data
x_ax = range(len(y_test))
plt.plot(x_ax, y_test, linewidth=1, label="original")
plt.plot(x_ax, y_pred, linewidth=1.1, label="predicted")
plt.title("y-test and y-predicted data")
plt.ylabel('GDP_per_capita')
plt.xlabel("30% of the training data")
plt.legend(loc='best',fancybox=True, shadow=True)
plt.grid(True)
plt.style.use("ggplot")
plt.show()

from sklearn.tree import plot_tree

fig = plt.figure(figsize=(15, 10))
plot_tree(model_rf.estimators_[0])

# Normalizing the graph for graphing purposes 

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(model_dataset)
scaled = scaler.fit_transform(model_dataset)
scaled_df = pd.DataFrame(scaled, columns=model_dataset.columns)

# Showing the normalized data
print(scaled_df.head())

# Appending dates for plotting
scaled_df = pd.concat([scaled_df,df.Date], axis = 1)

scaled_df.plot(x = "Date", y = ["GDP_Per_Capita","Goods Price Index (PCE)",'Non Durable Goods Price Index (PCE)', 'Services Price Index (PCE)','Market-based Price Index (PCE)',"Exports of Nondurable Goods (QI)"],figsize=(15, 10))
plt.ylabel("Normalized Data")
plt.xlabel("")
plt.title("Comparing the Normalized Data of the Best Preforming Features")
plt.style.use("ggplot")
plt.show()

scaled_df.plot(x = "Date", y = ["GDP_Per_Capita","Nasdaq Composite","S&P 500","Dow Jones Industrial Average"])
plt.ylabel("Normalized Data")
plt.xlabel("")
plt.title("Normalized data, GDP Per Capita vs Stocks")
plt.show()
